<?php

namespace Nzo\TunisiefretBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * DemandeExportRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DemandeExportRepository extends EntityRepository
{
    public function getAllDemandeExport()
    {
         $qb = $this->createQueryBuilder('a');
         $qb->where('a.tacking = 0')              
            ->andWhere('a.annuler_demande is NULL')  
            ->orderBy('a.date_depos', 'DESC');
         return $qb->getQuery();            
    } 
    
    public function getClientDemandeExportActive($id)
    {
         $qb = $this->createQueryBuilder('a');
         $qb->where('a.client = :client')
            ->andWhere('a.tacking = 0')              
            ->andWhere('a.annuler_demande is NULL')               
            ->setParameter('client', $id)
            ->orderBy('a.date_depos', 'DESC');
         return $qb->getQuery();            
    } 
    
    public function getCountClientDemandeExportActive($id)
    {
         $qb = $this->createQueryBuilder('a');
         $qb->select('COUNT(a)')
            ->where('a.client = :client')
            ->andWhere('a.tacking = 0')              
            ->andWhere('a.annuler_demande is NULL')               
            ->setParameter('client', $id);
         return $qb->getQuery()->getSingleScalarResult();
    } 
    
    public function getClientDemandeExportArchive($id)
    {
         $qb = $this->createQueryBuilder('a');
         $qb->where('a.client = :client')
            ->andWhere('a.tacking = 0')                 
            ->andWhere('a.annuler_demande is NOT NULL')              
            ->setParameter('client', $id)
            ->orderBy('a.date_depos', 'DESC');
         return $qb->getQuery();            
    } 
    
    public function getClientDemandeExportType($id)
    {
         $qb = $this->createQueryBuilder('a');
         $qb->where('a.client = :client')
            ->andWhere('a.demandeexporttype = 1')                   
            ->setParameter('client', $id)
            ->orderBy('a.date_depos', 'DESC');
         return $qb->getQuery();            
    } 
    
    public function getClientContratEncours($id)
    {
         $qb = $this->createQueryBuilder('a');
         $qb->where('a.client = :client')
            ->andWhere('a.tacking = 1')     
            ->andWhere('a.terminer_demande is NULL')                             
            ->setParameter('client', $id)
            ->orderBy('a.date_tacking', 'DESC');
         return $qb->getQuery();            
    } 
    
    public function getClientContratTerminer($id)
    {
         $qb = $this->createQueryBuilder('a');
         $qb->where('a.client = :client')    
            ->andWhere('a.terminer_demande is NOT NULL')                            
            ->setParameter('client', $id)
            ->orderBy('a.date_tacking', 'DESC');
         return $qb->getQuery();            
    } 

    public function getClientNbDemandeExportArchive($id)
    {
         $qb = $this->createQueryBuilder('a');
         $qb->select('COUNT(a)')
            ->where('a.client = :client')
            ->andWhere('a.tacking = 0')                 
            ->andWhere('a.annuler_demande is NOT NULL')              
            ->setParameter('client', $id);
         return $qb->getQuery()->getSingleScalarResult();
    } 
    
    public function getClientContratEncoursTrois($id)
    {
         $qb = $this->createQueryBuilder('a');
         $qb->where('a.client = :client')
            ->andWhere('a.tacking = 1')     
            ->andWhere('a.terminer_demande is NULL')                             
            ->setParameter('client', $id)
            ->orderBy('a.date_tacking', 'DESC')
            ->setMaxResults(3);     
         return $qb->getQuery()->execute();  
    } 
    
    //Recherche
    public function RechercheDemandeActive($id, $mot)
    {
         $qb = $this->createQueryBuilder('a');
         $qb->where( $qb->expr()->like('a.titre', '?1') )
            ->orWhere( $qb->expr()->like('a.description', '?2') )
            ->andWhere('a.client = :client')
            ->andWhere('a.tacking = 0')              
            ->andWhere('a.annuler_demande is NULL')               
            ->setParameter(1, '%' . $mot . '%')
            ->setParameter(2, '%' . $mot . '%')
            ->setParameter('client', $id)
            ->orderBy('a.date_depos', 'DESC');           
         return $qb->getQuery();            
    } 
 
    public function RechercheDemandeArchive($id, $mot)
    {
         $qb = $this->createQueryBuilder('a');
         $qb->where( $qb->expr()->like('a.titre', '?1') )
            ->orWhere( $qb->expr()->like('a.description', '?2') )
            ->andWhere('a.client = :client')
            ->andWhere('a.tacking = 0')              
            ->andWhere('a.annuler_demande is NOT NULL')               
            ->setParameter(1, '%' . $mot . '%')
            ->setParameter(2, '%' . $mot . '%')
            ->setParameter('client', $id)
            ->orderBy('a.date_depos', 'DESC');           
         return $qb->getQuery();            
    } 
    
    public function RechercheDemandeEnCours($id, $mot)
    {
         $qb = $this->createQueryBuilder('a');
         $qb->where( $qb->expr()->like('a.titre', '?1') )
            ->orWhere( $qb->expr()->like('a.description', '?2') )
            ->andWhere('a.client = :client')
            ->andWhere('a.tacking = 1')              
            ->andWhere('a.terminer_demande is NULL')              
            ->setParameter(1, '%' . $mot . '%')
            ->setParameter(2, '%' . $mot . '%')
            ->setParameter('client', $id)
            ->orderBy('a.date_tacking', 'DESC');           
         return $qb->getQuery();                       
    } 
    
    public function RechercheDemandeTerminer($id, $mot)
    {
         $qb = $this->createQueryBuilder('a');
         $qb->where( $qb->expr()->like('a.titre', '?1') )
            ->orWhere( $qb->expr()->like('a.description', '?2') )
            ->andWhere('a.client = :client')
            ->andWhere('a.terminer_demande is NOT NULL')                            
            ->setParameter(1, '%' . $mot . '%')
            ->setParameter(2, '%' . $mot . '%')
            ->setParameter('client', $id)
            ->orderBy('a.date_tacking', 'DESC');           
         return $qb->getQuery();                       
    } 
    
    // FOR ADMIN
    
    public function getAllDemandeFretActive()
    {
         $qb = $this->createQueryBuilder('a');
         $qb->where('a.tacking = 0')              
            ->andWhere('a.annuler_demande is NULL')               
            ->orderBy('a.date_depos', 'DESC');
         return $qb->getQuery()->execute();        
    } 
    
    public function getAllDemandeFretEnCours()
    {
         $qb = $this->createQueryBuilder('a');
         $qb->where('a.tacking = 1')              
            ->andWhere('a.terminer_demande is NULL')               
            ->orderBy('a.date_tacking', 'DESC');
         return $qb->getQuery()->execute();        
    } 
    
    public function getAllDemandeFretTermine()
    {
         $qb = $this->createQueryBuilder('a');
         $qb->where('a.terminer_demande is NOT NULL')                                
            ->orderBy('a.date_tacking', 'DESC');
         return $qb->getQuery()->execute();        
    } 
    
    public function getDemandeExportActiveAdmin()
    {
         $qb = $this->createQueryBuilder('a');
         $qb->where('a.tacking = 0')              
            ->andWhere('a.annuler_demande is NULL')               
            ->orderBy('a.date_depos', 'DESC');
         return $qb->getQuery();            
    } 
    
    public function getDemandeExportArchiveAdmin()
    {
         $qb = $this->createQueryBuilder('a');
         $qb->where('a.tacking = 0')                 
            ->andWhere('a.annuler_demande is NOT NULL')  
            ->orderBy('a.date_depos', 'DESC');
         return $qb->getQuery();            
    } 
    
    public function getContratEncoursAdmin()
    {
         $qb = $this->createQueryBuilder('a');
         $qb->where('a.tacking = 1')     
            ->andWhere('a.terminer_demande is NULL')     
            ->orderBy('a.date_tacking', 'DESC');
         return $qb->getQuery();            
    } 
    
    public function getContratTerminerAdmin()
    {
         $qb = $this->createQueryBuilder('a');
         $qb->where('a.terminer_demande is NOT NULL')  
            ->orderBy('a.date_tacking', 'DESC');
         return $qb->getQuery();            
    } 
    
    //Recherche
    public function RechercheDemandeActiveAdmin($mot)
    {
         $qb = $this->createQueryBuilder('a');
         $qb->where( $qb->expr()->like('a.titre', '?1') )
            ->orWhere( $qb->expr()->like('a.description', '?2') )
            ->andWhere('a.tacking = 0')              
            ->andWhere('a.annuler_demande is NULL')               
            ->setParameter(1, '%' . $mot . '%')
            ->setParameter(2, '%' . $mot . '%')
            ->orderBy('a.date_depos', 'DESC');           
         return $qb->getQuery();            
    } 
    
    public function RechercheDemandeArchiveAdmin($mot)
    {
         $qb = $this->createQueryBuilder('a');
         $qb->where( $qb->expr()->like('a.titre', '?1') )
            ->orWhere( $qb->expr()->like('a.description', '?2') )
            ->andWhere('a.tacking = 0')              
            ->andWhere('a.annuler_demande is NOT NULL')               
            ->setParameter(1, '%' . $mot . '%')
            ->setParameter(2, '%' . $mot . '%')
            ->orderBy('a.date_depos', 'DESC');           
         return $qb->getQuery();            
    } 
    
    public function RechercheDemandeEnCoursAdmin($mot)
    {
         $qb = $this->createQueryBuilder('a');
         $qb->where( $qb->expr()->like('a.titre', '?1') )
            ->orWhere( $qb->expr()->like('a.description', '?2') )
            ->andWhere('a.tacking = 1')              
            ->andWhere('a.terminer_demande is NULL')              
            ->setParameter(1, '%' . $mot . '%')
            ->setParameter(2, '%' . $mot . '%')
            ->orderBy('a.date_tacking', 'DESC');           
         return $qb->getQuery();                       
    } 
    
    public function RechercheDemandeTerminerAdmin($mot)
    {
         $qb = $this->createQueryBuilder('a');
         $qb->where( $qb->expr()->like('a.titre', '?1') )
            ->orWhere( $qb->expr()->like('a.description', '?2') )
            ->andWhere('a.terminer_demande is NOT NULL')                            
            ->setParameter(1, '%' . $mot . '%')
            ->setParameter(2, '%' . $mot . '%')
            ->orderBy('a.date_tacking', 'DESC');           
         return $qb->getQuery();                       
    } 
}
