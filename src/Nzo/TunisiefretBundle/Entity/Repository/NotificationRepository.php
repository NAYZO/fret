<?php

namespace Nzo\TunisiefretBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * NotificationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NotificationRepository extends EntityRepository
{
    public function getListNotifAjaxClientNonVu($id)
    {
         $qb = $this->createQueryBuilder('a');
         $qb->where('a.client = :client')
            ->andWhere('a.vu = 0')          
            ->orderBy('a.date', 'DESC')
            ->setParameter('client', $id);
         return $qb->getQuery()->execute();
    }
    
    public function getListNotifAjaxClient($id)
    {
         $qb = $this->createQueryBuilder('a');
         $qb->where('a.client = :client')        
            ->orderBy('a.date', 'DESC')
            ->setParameter('client', $id)
            ->setMaxResults(4);     
         return $qb->getQuery()->execute();
    }
    
    public function getListNotifClient($id)
    {
         $qb = $this->createQueryBuilder('a');
         $qb->where('a.client = :client')
            ->orderBy('a.date', 'DESC')
            ->setParameter('client', $id);
         return $qb->getQuery();
    }
    
    public function getNbNotifClient($id)
    {
         $qb = $this->createQueryBuilder('a');
         $qb->select('COUNT(a)')
            ->where('a.client = :client')
            ->andWhere('a.vu = 0')             
            ->setParameter('client', $id);
         return $qb->getQuery()->getSingleScalarResult();
    } 
    
    public function getNbNotifExportateur($id)
    {
         $qb = $this->createQueryBuilder('a');
         $qb->select('COUNT(a)')
            ->where('a.exportateur = :exportateur')
            ->andWhere('a.vu = 0')             
            ->setParameter('exportateur', $id);
         return $qb->getQuery()->getSingleScalarResult();
    } 
    
    
    public function getListNotifAjaxExportateur($id)
    {
         $qb = $this->createQueryBuilder('a');
         $qb->where('a.exportateur = :exportateur')
            ->orderBy('a.date', 'DESC')
            ->setParameter('exportateur', $id)
            ->setMaxResults(4);
         return $qb->getQuery()->execute();
    }
    
    public function getListNotifAjaxExportateurNonVu($id)
    {
         $qb = $this->createQueryBuilder('a');
         $qb->where('a.exportateur = :exportateur')
            ->andWhere('a.vu = 0')     
            ->orderBy('a.date', 'DESC')
            ->setParameter('exportateur', $id);
         return $qb->getQuery()->execute();
    }
    
    public function getListNotifExportateur($id)
    {
         $qb = $this->createQueryBuilder('a');
         $qb->where('a.exportateur = :exportateur')
            ->orderBy('a.date', 'DESC')
            ->setParameter('exportateur', $id);
         return $qb->getQuery();
    }
    
    // ADMIN
    
    public function getNbNotifAdmin($id)
    {
         $qb = $this->createQueryBuilder('a');
         $qb->select('COUNT(a)')
            ->where('a.admin = :admin')
            ->andWhere('a.vu = 0')             
            ->setParameter('admin', $id);
         return $qb->getQuery()->getSingleScalarResult();
    } 
    
    public function getListNotifAdmin($id)
    {
         $qb = $this->createQueryBuilder('a');
         $qb->where('a.admin = :admin')
            ->orderBy('a.date', 'DESC')
            ->setParameter('admin', $id);
         return $qb->getQuery();
    }
    
    public function getListNotifAjaxAdmin($id)
    {
         $qb = $this->createQueryBuilder('a');
         $qb->where('a.admin = :admin')        
            ->orderBy('a.date', 'DESC')
            ->setParameter('admin', $id)
            ->setMaxResults(4);     
         return $qb->getQuery()->execute();
    }
    
    public function getListNotifAjaxAdminNonVu($id)
    {
         $qb = $this->createQueryBuilder('a');
         $qb->where('a.admin = :admin')
            ->andWhere('a.vu = 0')          
            ->orderBy('a.date', 'DESC')
            ->setParameter('admin', $id);
         return $qb->getQuery()->execute();
    }
}
